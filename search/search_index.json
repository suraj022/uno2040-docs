{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"1-ledblink/","title":"LED blink circuit","text":"<p>The blinking LED circuit is like the electronics version of the \u201cHello World\u201d-program. We'll be blinking a single LED with customizable intervals.</p>"},{"location":"1-ledblink/#hardware-required","title":"hardware required","text":"Item Quantity <code>Raspberry pi pico</code> 1 <code>Micro USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>LED (any colour)</code> 1 <code>male to male jumpers</code> 2"},{"location":"1-ledblink/#blinking-on-board-led","title":"Blinking on-board LED","text":"<p>Raspberry pi pico has an on-board led internally connected to GP25 pin. </p>"},{"location":"1-ledblink/#importing-libraries","title":"Importing libraries","text":"<p>First we need to import 3 libraries namely:</p> <ul> <li>board: This library contains all of the pin definitions.</li> <li>digitalio: code for interfacing digital input/output devices.</li> <li>time: Library to impliment time based functions like delays.</li> </ul> <p>we can import these using the syntax</p> <pre><code>import board\nimport digitalio\nimport time\n</code></pre>"},{"location":"1-ledblink/#setting-pin-as-output","title":"Setting pin as output","text":"<p>The next thing we need to do is to define the pin as output using the following syntax.</p> <pre><code>led = digitalio.DigitalInOut(board.GP25)\nled.direction = digitalio.Direction.OUTPUT\n</code></pre>"},{"location":"1-ledblink/#main-loop","title":"Main loop","text":"<p>The last thing to do is to repeatedly turn the led on and off inside <code>while True:</code> loop.</p> <pre><code>while True:\n    led.value = True\n    time.sleep(0.5)\n    led.value = False\n    time.sleep(0.5)\n</code></pre> <p>click on <code>save</code> icon and the code with automatically start running and you can see the on-board led start blinking.</p> <p>Note</p> <p>the number <code>0.5</code> denotes the number of seconds. Increasing the number will make the blinking effect slower and vice versa.</p> <p>Go ahead and try a different value, something like:</p> <pre><code>while True:\n    led.value = True\n    time.sleep(0.1)\n    led.value = False\n    time.sleep(1)\n</code></pre> <p>and click <code>save</code>. You'll notice a different blink pattern.</p> <p>Copy the complete code from below.</p> Complete code <pre><code>import board\nimport digitalio\nimport time\n\nled = digitalio.DigitalInOut(board.GP25)\nled.direction = digitalio.Direction.OUTPUT\n\nwhile True:\n    led.value = True\n    time.sleep(0.5)\n    led.value = False\n    time.sleep(0.5)\n</code></pre>"},{"location":"1-ledblink/#blinking-an-external-led","title":"blinking an external LED","text":"<p>We'll be connecting an LED (any colour) to GP13 according to the circuit diagram below.</p> <p>Info</p> <p>GP13 can be replaced with any available GPIO pin (refer to the introduction page for full list of available GPIO pins)</p>"},{"location":"1-ledblink/#circuit-diagram","title":"circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables.</p>"},{"location":"1-ledblink/#code-changes","title":"code changes","text":"<p>we only need to change the GPIO pin number from <code>GP25</code> to <code>GP13</code> in the following line.</p> <pre><code>led = digitalio.DigitalInOut(board.GP13)\n</code></pre>"},{"location":"1-ledblink/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>import board\nimport digitalio\nimport time\n\nled = digitalio.DigitalInOut(board.GP13)\nled.direction = digitalio.Direction.OUTPUT\n\nwhile True:\n    led.value = True\n    time.sleep(0.5)\n    led.value = False\n    time.sleep(0.5)\n</code></pre>"},{"location":"1-ledblink/#activity","title":"Activity","text":"<p>Question</p> <p>Try mixing and matching blinking using multiple leds and multiple blink patterns.</p>"},{"location":"3-ledfading/","title":"LED fading","text":"<p>In this activity, we'll be controlling brightness of an LED using pwm or <code>pulse width modulation</code> technique.</p> <p>Info</p> <p>Refer to technical jargon page  HERE for and explaination to of pwm signal.</p>"},{"location":"3-ledfading/#hardware-required","title":"hardware required","text":"Item Quantity <code>Raspberry pi pico</code> 1 <code>Micro USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>LED (any colour)</code> 1 <code>male to male jumpers</code> 2"},{"location":"3-ledfading/#circuit-diagram","title":"circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables.</p>"},{"location":"3-ledfading/#importing-libraries","title":"importing libraries","text":"<p>First we need to import 3 libraries namely:</p> <ul> <li>time: Library to impliment time based functions like delays.</li> <li>board: This library contains all of the pin definitions.</li> <li>pwmio: code used for generation of digital PWM signals.</li> </ul> <p>we can import these using the syntax</p> <pre><code>import time\nimport board\nimport pwmio\n</code></pre>"},{"location":"3-ledfading/#setting-up-pwm-pin","title":"setting up pwm pin","text":"<p>setting up pwm can be done using the following syntax</p> <pre><code>led = pwmio.PWMOut(board.GP14, frequency=5000, duty_cycle=0)\n</code></pre> <p>The arguments for PWMout are as follows:</p> <ul> <li> <p><code>board.GP14</code> : It refers to the pin number that will be used to output pwm signal.</p> </li> <li> <p><code>frequency=5000</code> : Frequency of the pwm* signal. currently set to 5000hz.</p> </li> <li> <p><code>duty_cycle=0</code> : It refers to the current the ratio of the ON time of the PWM signal.</p> </li> </ul> <p>Info</p> <p>The value of duty_cycle consists of a 16-bit integer value. i.e. The value ranges from <code>0 to 65536</code> where <code>0</code> is completely OFF and <code>65536</code> being completely ON.</p>"},{"location":"3-ledfading/#main-loop","title":"Main loop","text":"<p>The main loop consists of two parts i.e up cycle and down cycle inside the <code>while True:</code></p>"},{"location":"3-ledfading/#up-cycle","title":"Up cycle","text":"<p>In this part, the <code>duty_cycle</code> of the pwm signal increases from <code>0 to 65536</code> using the following syntax:</p> <pre><code>for i in range(1000):\n    led.duty_cycle = int((i / 1000) * 65535)\n    time.sleep(0.001)\n</code></pre> <p>The loop goes from <code>0 to 1000</code> with a <code>0.001 seconds</code> interval hence the complete for loop takes <code>1 second</code>.</p> <p>Info</p> <p>The calculation <code>int((i / 1000) * 65535)</code> converts the range of <code>0 to 1000</code> to <code>0 to 65535</code> which is a 16-bit value.</p>"},{"location":"3-ledfading/#down-cycle","title":"Down cycle","text":"<p>Similar to the up cycle, <code>down_cycle</code> goes from <code>65535 to 0</code> using the followinf syntax:</p> <pre><code>for i in range(1000):\n    led.duty_cycle = 65535 - int((i / 1000) * 65535)\n    time.sleep(0.001)\n</code></pre> <p>Info</p> <p>The calculation <code>65535 - int((i / 1000) * 65535)</code> converts the range of <code>0 to 1000</code> to <code>65535 to 0</code> which is a 16-bit value.</p>"},{"location":"3-ledfading/#complete-main-loop","title":"Complete main loop","text":"<pre><code>while True:\n        for i in range(1000):\n            led.duty_cycle = int((i / 1000) * 65535)\n            time.sleep(0.001)\n        for i in range(1000):\n            led.duty_cycle = 65535 - int((i / 1000) * 65535)\n            time.sleep(0.001)\n</code></pre>"},{"location":"3-ledfading/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>import time\nimport board\nimport pwmio\n\nled = pwmio.PWMOut(board.GP25, frequency=5000, duty_cycle=0)\n\nwhile True:\n    for i in range(1000):\n        led.duty_cycle = int((i / 1000) * 65535)\n        time.sleep(0.001)\n    for i in range(1000):\n        led.duty_cycle = 65535 - int((i / 1000) * 65535)\n        time.sleep(0.001)\n</code></pre> Same experiment but using a slightly different code <pre><code>import time\nimport board\nimport pwmio\n\n# LED setup for most CircuitPython boards:\nled = pwmio.PWMOut(board.GP14, frequency=5000, duty_cycle=0)\n\nwhile True:\n    for i in range(65535):\n        if i &lt; 32767:\n            led.duty_cycle = int(i * 2)  # PWM upcycle\n        else:\n            led.duty_cycle = 65535 - int((i - 32767) * 2)  # PWM downcycle\n        time.sleep(0.0001)\n</code></pre>"},{"location":"3-ledfading/#activity","title":"Activity","text":"<p>Question</p> <p>Try adding a second LED and see if you can alternate the Fading sequence between the leds.</p>"},{"location":"4-digitalinputs/","title":"Digital inputs","text":"<p>In this activity, We'll be interfacing with tactile switches as digital inputs while controlling leds with them and also displaying some messages on the serial terminal.</p>"},{"location":"4-digitalinputs/#hardware-required","title":"hardware required","text":"Item Quantity <code>Raspberry pi pico</code> 1 <code>Micro USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>LED (any colour)</code> 2 <code>Push buttons</code> 2 <code>male to male jumpers</code> 9"},{"location":"4-digitalinputs/#interfacing-with-leds","title":"Interfacing with LEDs","text":"<p>In this part, We'll be using two buttons and two LEDs. The LEDs will be turned on and off by using two tacticle buttons shown in the ciruit diagram.</p> <p>We'll program both tacticle switches in two ways: <code>Momentary mode</code> and <code>on/off mode</code>.</p>"},{"location":"4-digitalinputs/#circuit-diagram","title":"Circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables.</p>"},{"location":"4-digitalinputs/#importing-libraries","title":"Importing libraries","text":"<p>First we need to import 3 libraries namely:</p> <ul> <li>board: This library contains all of the pin definitions.</li> <li>digitalio: code for interfacing digital input/output devices.</li> <li>time: Library to impliment time based functions like delays.</li> </ul> <p>we can import these using the syntax</p> <pre><code>import board\nimport digitalio\nimport time\n</code></pre>"},{"location":"4-digitalinputs/#boolean-variable-to-store-button-state","title":"Boolean variable to store button state","text":"<p>The following variable stores the state of the button latch</p> <pre><code>state = False\n</code></pre>"},{"location":"4-digitalinputs/#setting-pins-as-output","title":"Setting pins as output","text":"<p>The next thing we need to do is to define the pins as outputs using the following syntax.</p> <pre><code>led1 = digitalio.DigitalInOut(board.GP12)\nled1.direction = digitalio.Direction.OUTPUT\n\nled2 = digitalio.DigitalInOut(board.GP13)\nled2.direction = digitalio.Direction.OUTPUT\n</code></pre>"},{"location":"4-digitalinputs/#setting-up-digital-input","title":"Setting up digital input","text":"<p>Next thing is to setup a digital input pin using the following syntax</p> <pre><code>switch1 = digitalio.DigitalInOut(board.GP14)\nswitch1.direction = digitalio.Direction.INPUT\nswitch1.pull = digitalio.Pull.UP\n\nswitch2 = digitalio.DigitalInOut(board.GP15)\nswitch2.direction = digitalio.Direction.INPUT\nswitch2.pull = digitalio.Pull.UP\n</code></pre>"},{"location":"4-digitalinputs/#main-loop","title":"Main loop","text":"<p>In the main loop inside <code>while True:</code> there are two control statements:</p>"},{"location":"4-digitalinputs/#momentary-switching","title":"Momentary switching","text":"<p>Momentary Switch requires a simple <code>if else</code> control statement where the condition is switch1's value and depending on it the led1 turns on or off. Syntax for the same is as follows:</p> <pre><code>if switch1.value:\n    led1.value = False\nelse:\n    led1.value = True\n</code></pre>"},{"location":"4-digitalinputs/#latching-switch","title":"Latching switch","text":"<p>Latching switch alternates the state of the LED by turning it on and off from each subsequent key presses. Each button press alternates the value of <code>state</code> variable from <code>True</code> to <code>False</code> and vice versa and set the led1's value accordingly. The syntax is as follows:</p> <pre><code>if not switch2.value:    \n    if state == False:\n        state = True\n    else:\n        state = False\n\nled2.value = state\n</code></pre> <p>Info</p> <p><code>not</code> is used in above if statement because the default state of input is set to pull-up. Hence, using <code>not</code> inverts the logic. Alternatively we can also write the statement as <code>if switch2.value == False:</code> which will yield the same result.</p> <p>After that a small debounce delay is added to prevent rapid switching of LEDs.</p> <pre><code>time.sleep(0.2)  # debounce delay, Sleep for 0.2 seconds or 200 ms\n</code></pre>"},{"location":"4-digitalinputs/#complete-code","title":"Complete code","text":"Complete code <pre><code>import time\nimport board\nimport digitalio\n\nstate = False\n\nled1 = digitalio.DigitalInOut(board.GP12)\nled1.direction = digitalio.Direction.OUTPUT\n\nled2 = digitalio.DigitalInOut(board.GP13)\nled2.direction = digitalio.Direction.OUTPUT\n\nswitch1 = digitalio.DigitalInOut(board.GP14)\nswitch1.direction = digitalio.Direction.INPUT\nswitch1.pull = digitalio.Pull.UP\n\nswitch2 = digitalio.DigitalInOut(board.GP15)\nswitch2.direction = digitalio.Direction.INPUT\nswitch2.pull = digitalio.Pull.UP\n\nwhile True:\n    if switch1.value:\n        led1.value = False\n    else:\n        led1.value = True\n\n    if not switch2.value:    \n        if state == False:\n            state = True\n        else:\n            state = False\n\n    led2.value = state\n\n    time.sleep(0.2)  # debounce delay, Sleep for 0.2 seconds or 200 ms\n</code></pre>"},{"location":"4-digitalinputs/#interfacing-with-serial-monitor","title":"Interfacing with Serial monitor","text":"<p>Second part is about interfacing buttons (tactile switches) with your pc (computer/laptop). We'll use the same 2 buttons</p>"},{"location":"4-digitalinputs/#circuit-diagram_1","title":"Circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables.</p>"},{"location":"4-digitalinputs/#serial-communication","title":"Serial communication","text":"<p>Info</p> <p>Refer to technical jargon page HERE for and explaination to of Serial communication.</p> <p>In this activity, We'll use two tactile switches to send two different data to the computer using serial module. An example syntax is as follow:</p> <p>A simple text information can be sent using:</p> <pre><code>print(\"hello world\")\n</code></pre> <p>Similarly, We can also display variable values like:</p> <pre><code>variable1 = 128\n\nprint(\"value of variable1 is\", variable1)\n</code></pre>"},{"location":"4-digitalinputs/#importing-libraries_1","title":"Importing libraries","text":"<p>In addition to the 3 libraries used above, we'll also use the following library. It's use will be explained below.</p> <ul> <li>microcontroller: This library contains microcontroller specific functions.</li> </ul> <p>we can import by using the following statement.</p> <pre><code>import microcontroller\n</code></pre>"},{"location":"4-digitalinputs/#setting-up-digital-input_1","title":"Setting up digital input","text":"<p>Info</p> <p>same as above</p>"},{"location":"4-digitalinputs/#main-loop_1","title":"Main loop","text":"<p>We'll use switch number 1 to print a simple text message and switch number 2 to print pico's current CPU temperature in degree celsius.</p> <pre><code>while True:\n    if not switch1.value:\n        print(\"helloworld\")\n    if not switch2.value:\n        print(\"Current CPU temperature is:\", microcontroller.cpu.temperature)\n    time.sleep(0.2)\n</code></pre>"},{"location":"4-digitalinputs/#complete-code_1","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>import microcontroller\nimport board\nimport digitalio\nimport time\n\nswitch1 = digitalio.DigitalInOut(board.GP14)\nswitch1.direction = digitalio.Direction.INPUT\nswitch1.pull = digitalio.Pull.UP\n\nswitch2 = digitalio.DigitalInOut(board.GP15)\nswitch2.direction = digitalio.Direction.INPUT\nswitch2.pull = digitalio.Pull.UP\n\nwhile True:\n    if not switch1.value:\n        print(\"helloworld\")\n    if not switch2.value:\n        print(\"Current CPU temperature is:\", microcontroller.cpu.temperature)\n    time.sleep(0.2)\n</code></pre>"},{"location":"4-digitalinputs/#activity","title":"Activity","text":"<p>Question</p> <p>Constantly print both the switch's value on the serial terminal.</p>"},{"location":"5-analoginputs/","title":"Analog inputs","text":"<p>Inputs from potentiometer and display its output on screen or control an led's brightness. Interfacing a 10k potentiometer and control and led brightness </p>"},{"location":"5-analoginputs/#hardware-required","title":"hardware required","text":"Item Quantity <code>Raspberry pi pico</code> 1 <code>Micro USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>LED (any colour)</code> 1 <code>10k potentiometer</code> 1 <code>male to male jumpers</code> 5"},{"location":"5-analoginputs/#circuit-diagram","title":"Circuit diagram","text":"<p>Info</p> <p>Raspberry pi pico only has three analog inputs (ADC) channels available on pins <code>GP26_A0</code>, <code>GP27_A1</code> and <code>GP28_A2</code></p>"},{"location":"5-analoginputs/#importing-libraries","title":"Importing libraries","text":"<p>First we need to import 4 libraries namely:</p> <ul> <li>board: This library contains all of the pin definitions.</li> <li>time: Library to impliment time based functions like delays.</li> <li>pwmio: code used for generation of digital PWM signals.</li> <li>analogio: code used to input analog values and convert them to digital values.</li> </ul> <p>we can import these using the syntax</p> <pre><code>import board\nimport time\nimport pwmio\nimport analogio\n</code></pre>"},{"location":"5-analoginputs/#setting-up-inputs-and-outputs","title":"Setting up inputs and outputs","text":"<p>Setting up pwm output can be done using the following syntax</p> <pre><code>led = pwmio.PWMOut(board.GP14, frequency=5000, duty_cycle=0)\n</code></pre> <p>The arguments for PWMout are as follows:</p> <ul> <li> <p><code>board.GP14</code> : It refers to the pin number that will be used to output pwm signal.</p> </li> <li> <p><code>frequency=5000</code> : Frequency of the pwm* signal. currently set to 5000hz.</p> </li> <li> <p><code>duty_cycle=0</code> : It refers to the current the ratio of the ON time of the PWM signal.</p> </li> </ul> <p>Info</p> <p>The value of duty_cycle consists of a 16-bit integer value. i.e. The value ranges from <code>0 to 65536</code> where <code>0</code> is completely OFF and <code>65536</code> being completely ON.</p> <p>Next thing is defining analog input pin using the following syntax.</p> <pre><code>analog_in = analogio.AnalogIn(board.GP26_A0)\n</code></pre> <p>Info</p> <p>Raspberry pi pico supports three analogIn channels as stated above.</p> <p>Note</p> <p>Raspberry pi pico has 12-bit analog channels but the code <code>analogio.AnalogIn(board.GP26_A0)</code> returns 16-bit integer value which ranges from <code>0 to 65535</code>. Due to the conversion of <code>12-bit</code> to <code>16-bit</code>, the true range will never be truely <code>0</code> and <code>65535</code> but will be apporx. <code>300</code> to <code>65400</code>.</p>"},{"location":"5-analoginputs/#main-loop","title":"Main loop","text":"<p>Inside our main loop <code>while True:</code>, We'll create a local variable called <code>aInput</code>. </p> <p>Info</p> <p>A variable name can be anything but should not start with a number.</p> <p>We'll store our analog value into this variable using the syntax:</p> <pre><code>aInput = analog_in.value\n</code></pre> <p>Next, We'll assign this value to the <code>duty_cycle</code> of the led and simultaneously print the values on the serial monitor. the complete main loop is as follows:</p> <pre><code>while True:\n    aInput = analog_in.value\n    led.duty_cycle = aInput\n    print(aInput)\n    time.sleep(0.1)\n</code></pre> <p>Note</p> <p>The numeric value in inside <code>time.sleep()</code> can be increased or decreased to simultaneously decrease or increase the sampling rate.</p> <p>If you want to plot a graph of analog values with respect to time, we'll have to change the print command to:</p> <pre><code>print((aInput,))\n</code></pre> <p>After making the changes, click on plotter icon from the top menu.</p> <p></p> <p>Serial plotter graph will appear on the bottom which will display analog values with respect to time.</p> <p></p>"},{"location":"5-analoginputs/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>import time\nimport board\nimport pwmio\nimport analogio\n\nled = pwmio.PWMOut(board.GP14, frequency=5000, duty_cycle=0)\n\nanalog_in = analogio.AnalogIn(board.GP26_A0)\n\nwhile True:\n    aInput = analog_in.value\n    led.duty_cycle = aInput\n    print(aInput)\n    time.sleep(0.1)\n</code></pre>"},{"location":"5-analoginputs/#activity","title":"Activity","text":"<p>Question</p> <p>Add a second potentiometer and control the on board LED while also controlling the first LED connected to pin <code>GP14</code>.</p>"},{"location":"Distance-Using-Ultrasonic-sensor/","title":"Distance using ultrasonic sensor","text":"<p>We will measure distance using HC-SR04 Ultrasonic Sensor </p>"},{"location":"Distance-Using-Ultrasonic-sensor/#hardware-required","title":"hardware required","text":"Item Quantity <code>UNO 2040</code> 1 <code>UNO 2040 USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>HC-SR04 Ultrasonic Sensor</code> 1 <code>male to male jumpers</code> 4"},{"location":"Distance-Using-Ultrasonic-sensor/#about-hc-sr04-ultrasonic-sensor","title":"About HC-SR04 Ultrasonic Sensor","text":"<p>The HC-SR04 Ultrasonic Distance Sensor is a sensor used for detecting the distance to an object by emitting ultrasonic sound waves, and converts the reflected sound into an electrical signal. </p>"},{"location":"Distance-Using-Ultrasonic-sensor/#about-hc-sr04-ultrasonic-sensor-pins","title":"About HC-SR04 Ultrasonic Sensor Pins","text":"PIN NAME FUNCTION <code>VCC</code> supply voltage is nominally 5 V. <code>TRIG</code> emitting ultrasonic sound waves <code>ECHO</code> converts the reflected sound into an electrical signal <code>GND</code> ground pin"},{"location":"Distance-Using-Ultrasonic-sensor/#circuit-diagram","title":"Circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables.</p>"},{"location":"Distance-Using-Ultrasonic-sensor/#formula-to-calculate","title":"Formula To Calculate","text":"<p>Formula :  Distance = Speed * Time </p> <p>Distance = Speed of sound in air * (Time taken/2)</p> <p>Note: Speed of sound in air = 344 m/s</p> <p>Note: Here we are dividing the Time taken by 2 because sensor will give total time from the emitter to the receiver but we only need the time from emitter to object </p>"},{"location":"Distance-Using-Ultrasonic-sensor/#defining-the-hc-sr04-ultrasonic-sensor-pin-and-making-variable","title":"Defining the HC-SR04 Ultrasonic Sensor pin and making variable","text":"<p><pre><code>int distance;\nlong duration;\nint echo_pin = 11;\nint trig_pin = 12;\n</code></pre> In duration variable we will store time taken by the sound wave traveling from the emitter to the receiver and In distance variable we will store distance which is calculate</p>"},{"location":"Distance-Using-Ultrasonic-sensor/#setting-pin-as-output","title":"Setting pin as output","text":"<p>The next thing we need to do is to define the trig pin as output and echo pin as input also we will setup serial monitor using the following code.</p> <pre><code>void setup(){\npinMode(trig_Pin, OUTPUT);  pinMode(echo_Pin, INPUT); Serial.begin(9600);\nSerial.println(\"Distance measurement\");\ndelay(500);\n}\n</code></pre>"},{"location":"Distance-Using-Ultrasonic-sensor/#main-loop","title":"Main loop","text":"<p>Here we are going place the formula and print the distances in serial monitor using the following code.</p> <pre><code> void loop(){\ndigitalWrite(trigPin, LOW);\ndelay(2);\ndigitalWrite(trigPin,HIGH);\ndelay(2);\ndigitalWrite(trigPin,LOW); duration = pulseIn(echoPin, HIGH);\ndistance = duration * 0.0344 / 2; Serial.print(\"Distance: \");\nSerial.print(distance); Serial.println(\" cm\");\ndelay(100);\n}                      </code></pre> <p>click on <code>upload</code> icon and the code will upload in uno2040 and open serial monitor you will see the distance from sensor in serial monitor</p>"},{"location":"Distance-Using-Ultrasonic-sensor/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>int distance;\nlong duration;\nint echo_pin = 11;\nint trig_pin = 12;\nvoid setup(){\npinMode(trig_Pin, OUTPUT);  pinMode(echo_Pin, INPUT); Serial.begin(9600);\nSerial.println(\"Distance measurement\");\ndelay(500);\n}            void loop(){\ndigitalWrite(trigPin, LOW);\ndelay(2);\ndigitalWrite(trigPin,HIGH);\ndelay(2);\ndigitalWrite(trigPin,LOW); duration = pulseIn(echoPin, HIGH);\ndistance = duration * 0.0344 / 2; Serial.print(\"Distance: \");\nSerial.print(distance); Serial.println(\" cm\");\ndelay(100);\n}  </code></pre>"},{"location":"Distance-Using-Ultrasonic-sensor/#activity","title":"Activity","text":"<p>Question</p> <p>Try printing distances in meters</p>"},{"location":"RGB-LED/","title":"RGB LED","text":"<p>We will glow some different colour on Rgb led</p>"},{"location":"RGB-LED/#hardware-required","title":"hardware required","text":"Item Quantity <code>UNO 2040</code> 1 <code>UNO 2040 USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>RGB LED</code> 1 <code>male to male jumpers</code> 4"},{"location":"RGB-LED/#about-pins-of-rgb-led","title":"About Pins Of RGB Led","text":""},{"location":"RGB-LED/#circuit-diagram","title":"circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables   Please Use Breadboard to connect the led in above diagram to explain we have not used the breadboard</p>"},{"location":"RGB-LED/#defining-the-pin","title":"defining the pin","text":"<pre><code>int PIN_RED   = 5;\nint PIN_GREEN = 6;\nint PIN_BLUE  = 7;\n</code></pre> <p>we can make variable using this the code</p>"},{"location":"RGB-LED/#defining-led-pin-as-output","title":"Defining led pin as output","text":"<p>defining the rgb led pin as output</p> <pre><code>void setup() {\npinMode(PIN_RED,   OUTPUT);\npinMode(PIN_GREEN, OUTPUT);\npinMode(PIN_BLUE,  OUTPUT);}\n</code></pre>"},{"location":"RGB-LED/#main-loop","title":"Main loop","text":"<p><pre><code>void loop() {\nanalogWrite(PIN_RED,   0);\nanalogWrite(PIN_GREEN, 0);\nanalogWrite(PIN_BLUE,  200);\ndelay(1000); analogWrite(PIN_RED,  200);\nanalogWrite(PIN_GREEN, 0);\nanalogWrite(PIN_BLUE,  0);\ndelay(1000); analogWrite(PIN_RED,   0);\nanalogWrite(PIN_GREEN, 200);\nanalogWrite(PIN_BLUE, 0);\ndelay(1000);\nanalogWrite(PIN_RED,   60);\nanalogWrite(PIN_GREEN, 60);\nanalogWrite(PIN_BLUE, 0);\ndelay(1000);}\n</code></pre> we will glow blue colour then red colour then green colour and yellow colour</p>"},{"location":"RGB-LED/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>int PIN_RED   = 5;\nint PIN_GREEN = 6;\nint PIN_BLUE  = 7;\nvoid setup() {\npinMode(PIN_RED,   OUTPUT);\npinMode(PIN_GREEN, OUTPUT);\npinMode(PIN_BLUE,  OUTPUT);}\nvoid loop() {\nanalogWrite(PIN_RED,   0);\nanalogWrite(PIN_GREEN, 0);\nanalogWrite(PIN_BLUE,  200);\ndelay(1000); analogWrite(PIN_RED,  200);\nanalogWrite(PIN_GREEN, 0);\nanalogWrite(PIN_BLUE,  0);\ndelay(1000); analogWrite(PIN_RED,   0);\nanalogWrite(PIN_GREEN, 200);\nanalogWrite(PIN_BLUE, 0);\ndelay(1000);\nanalogWrite(PIN_RED,   60);\nanalogWrite(PIN_GREEN, 60);\nanalogWrite(PIN_BLUE, 0);\ndelay(1000);} </code></pre>"},{"location":"RGB-LED/#activity","title":"Activity","text":"<p>Question</p> <p>Try to glow diffrent colour on it </p>"},{"location":"blink-led-arduino-ide/","title":"LED blink circuit","text":"<p>The blinking LED circuit is like the electronics version of the \u201cHello World\u201d-program. We'll be blinking a single LED with customizable intervals.</p>"},{"location":"blink-led-arduino-ide/#hardware-required","title":"hardware required","text":"Item Quantity <code>UNO 2040</code> 1 <code>UNO 2040 USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>LED (any colour)</code> 1 <code>male to male jumpers</code> 2"},{"location":"blink-led-arduino-ide/#blinking-on-board-led","title":"Blinking on-board LED","text":"<p>UNO 2040 has an on-board led internally connected to D13 pin. </p>"},{"location":"blink-led-arduino-ide/#defining-the-led-pin","title":"Defining the led pin","text":"<pre><code>int led_pin = 13\n</code></pre>"},{"location":"blink-led-arduino-ide/#setting-pin-as-output","title":"Setting pin as output","text":"<p>The next thing we need to do is to define the pin as output using the following syntax.</p> <pre><code>void setup() {\npinMode(led_pin, OUTPUT);\n}\n</code></pre>"},{"location":"blink-led-arduino-ide/#main-loop","title":"Main loop","text":"<p>The last thing to do is to repeatedly turn the led on and off inside <code>void loop()</code>  loop.</p> <pre><code>void loop() {\ndigitalWrite(led_pin, HIGH);  delay(500);                      digitalWrite(led_Pin, LOW);  delay(500);                      }\n</code></pre> <p>click on <code>upload</code> icon and the code will upload in uno2040 and start running and you can see the on-board led start blinking.</p> <p>Note</p> <p><code>delay(500);</code> denotes the number of micro seconds. Increasing the number will make the blinking effect slower and vice versa.</p> <p>Go ahead and try a different value, something like:</p> <pre><code>void loop() {\ndigitalWrite(led_pin, HIGH);  delay(1000);                     digitalWrite(led_pin, LOW);   delay(500);                      </code></pre> <p>and click <code>upload</code>. You'll notice a different blink pattern.</p> <p>Copy the complete code from below.</p> Complete code <pre><code>int led_pin = 13\nvoid setup() {\npinMode(led_pin, OUTPUT);\n}\nvoid loop() {\ndigitalWrite(led_pin, HIGH);\ndelay(1000);                    digitalWrite(led_Pin, LOW);  delay(1000);                      }\n</code></pre>"},{"location":"blink-led-arduino-ide/#blinking-an-external-led","title":"blinking an external LED","text":"<p>We'll be connecting an LED (any colour) to D7 according to the circuit diagram below.</p> <p>Info</p> <p>D13 can be replaced with any available Digital pin (refer to the introduction page for full list of available Digital Pin )</p>"},{"location":"blink-led-arduino-ide/#circuit-diagram","title":"Circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables.</p>"},{"location":"blink-led-arduino-ide/#code-changes","title":"Code changes","text":"<p>we only need to change the digtal pin number from <code>D13</code> to <code>D7</code> in the following line.</p> <pre><code>int led_pin = 7\nvoid setup() {\npinMode(led_pin, OUTPUT);\n}\nvoid loop() {\ndigitalWrite(led_pin, HIGH);\ndelay(1000);                    digitalWrite(led_pin, LOW);  delay(1000);                      }\n</code></pre>"},{"location":"blink-led-arduino-ide/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>int led_pin = 7\nvoid setup() {\npinMode(led_pin, OUTPUT);\n}\nvoid loop() {\ndigitalWrite(led_pin , HIGH);\ndelay(1000);                    digitalWrite(led_pin, LOW);  delay(1000);                      }\n</code></pre>"},{"location":"blink-led-arduino-ide/#activity","title":"Activity","text":"<p>Question</p> <p>Try mixing and matching blinking using multiple leds and multiple blink patterns.</p>"},{"location":"dth11/","title":"Humidity and Temperature","text":"<p>Humidity and Temperature Using DHT11 Sensor </p>"},{"location":"dth11/#hardware-required","title":"hardware required","text":"Item Quantity <code>UNO 2040</code> 1 <code>UNO 2040 USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>DHT11 Sensor</code> 1 <code>male to male jumpers</code> 4"},{"location":"dth11/#circuit-diagram","title":"circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables   Please Use Breadboard to connect the DTH11 Sesnor in above diagram to explain we have not used the breadboard</p>"},{"location":"dth11/#defining-the-pin-sensor-sesnor-type-and-libary","title":"defining the pin , sensor , sesnor type and libary","text":"<p><pre><code>#include \"DHT.h\"\nint DHTPIN = 7 ;\nint DHTTYPE = DHT11 ;\nDHT dht(DHTPIN, DHTTYPE);\n</code></pre>  definiinb sensor data pin , sensor type and sensor and  the libary</p> <p>Note</p> <p>Please Install adafruit dht libary</p>"},{"location":"dth11/#setting-up-sensor-and-serial-monitor","title":"Setting up sensor and serial monitor","text":"<p>setting up serial monitor and sensor </p> <pre><code>void setup() {\nSerial.begin(9600);\ndht.begin(); }\n</code></pre>"},{"location":"dth11/#main-loop","title":"Main loop","text":"<p><pre><code>void loop() {\ndelay(2000);\nfloat humi  = dht.readHumidity();\nfloat tempC = dht.readTemperature();\nif (isnan(humi) || isnan(tempC) ) {\nSerial.println(\"Failed to read from DHT sensor!\");\n} else {\nSerial.print(\"Humidity: \");\nSerial.print(humi);\nSerial.print(\"%\");\nSerial.print(\"  |  \"); Serial.print(\"Temperature: \");\nSerial.print(tempC);\nSerial.print(\"\u00b0C ~ \");\n}}\n</code></pre> reading humidity value and temperature from sensor and printing it on serial monitor</p>"},{"location":"dth11/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>#include \"DHT.h\"\nint DHTPIN = 7 ;\nint DHTTYPE = DHT11 ;\nDHT dht(DHTPIN, DHTTYPE);\nvoid setup() {\nSerial.begin(9600);\ndht.begin(); }\nvoid loop() {\ndelay(2000);\nfloat humi  = dht.readHumidity();\nfloat tempC = dht.readTemperature();\nif (isnan(humi) || isnan(tempC) ) {\nSerial.println(\"Failed to read from DHT sensor!\");\n} else {\nSerial.print(\"Humidity: \");\nSerial.print(humi);\nSerial.print(\"%\");\nSerial.print(\"  |  \"); Serial.print(\"Temperature: \");\nSerial.print(tempC);\nSerial.print(\"\u00b0C ~ \");\n}}\n</code></pre>"},{"location":"dth11/#activity","title":"Activity","text":"<p>Question</p> <p>Try to print temperature in fahrenheit</p>"},{"location":"electronics/","title":"Crash crouse on electronics","text":""},{"location":"electronics/#definition","title":"Definition","text":"<p>Electronics is the study and use of electrical parts and circuits. These \"electronic components\" control electricity for useful purposes.</p> <p>Electronic devices have many electronic components such as - resistors, capacitors, coils of wire called inductors, integrated circuits, connection wires and circuit boards.</p> <p>Info</p> <p>This page covers the most basic definition of electronics and explain the topic well enough to be able to preform experiments/projects provided in this kit.</p>"},{"location":"electronics/#simple-electronic-circuit","title":"Simple electronic circuit","text":"<p>Electronic circuits usually use direct current sources. The load of an electronic circuit may be as simple as a few resistors, capacitors, and a lamp, all connected together to create the flash in a camera. Or an electronic circuit can be complicated, connecting thousands of resistors, capacitors, and transistors. It may be an integrated circuit such as the microprocessor in a computer.</p> <p>Resistors and other circuit elements can be connected in series or in parallel. Resistance in series circuits is the sum of the resistance.</p> Fig: Electronic circuit (closed) <p>Diagram above shows a simple electronics circuit, consists of three main components</p> <ul> <li> <p>L.E.D.</p> </li> <li> <p>Resistor</p> </li> <li> <p>Battery</p> </li> </ul> <p>These components are connected in such a way that it completes the <code>circuit</code> making the current flow. This is what we call a closed circuit.</p> <p>Info</p> <p>Scroll down for detailed explaination on all three components.</p> <p>What would happen if we break any wire connection in the above shown circuit? The circuit will simply stop working. As shown in the diagram below, This is what we call an open circuit. Where no current flow though.</p> Fig: Electronic circuit (open) <p>Conclusion</p> <p>a circuit must always be a closed circuit to be able to function.</p>"},{"location":"electronics/#protoyping-tools","title":"Protoyping tools","text":""},{"location":"electronics/#breadboard","title":"Breadboard","text":"<p>Breadboard is an electronic tool which can be used to test electrical circuits. In that case soldering is not needed. A breadboard is a construction base for prototyping of electronics.</p> <p>Because the solderless breadboard does not require soldering, it is reusable. This makes it easy to use for creating temporary prototypes and experimenting with circuit design. For this reason, solderless breadboards are also extremely popular with students and in technological education.</p>"},{"location":"electronics/#layout","title":"Layout","text":"<p>The layout of a typical solderless breadboard is made up from two types of areas, called strips. Strips consist of interconnected electrical terminals.</p> Fig: 800-pin Breadboard"},{"location":"electronics/#terminal-strips","title":"Terminal strips","text":"<p>The main areas, to hold most of the electronic components.</p> <p>In the middle of a terminal strip of a breadboard, one typically finds a notch running in parallel to the long side. The notch is to mark the centerline of the terminal strip and provides limited airflow (cooling) to DIP ICs straddling the centerline. The clips on the right and left of the notch are each connected in a radial way; typically five clips (i.e., beneath five holes) in a row on each side of the notch are electrically connected. The five rows on the left of the notch are often marked as A, B, C, D, and E, while the ones on the right are marked F, G, H, I and J. </p>"},{"location":"electronics/#bus-strips","title":"Bus Strips","text":"<p>To provide power to the electronic components.</p> <p>A bus strip usually contains two rows: one for ground and one for a supply voltage. However, some breadboards only provide a single-row power distributions bus strip on each long side. Typically the row intended for a supply voltage is marked in red, while the row for ground is marked in blue or black.</p> <p>Bus strips typically run down one or both sides of a terminal strip . On large breadboards bus strips can often be found on both the top and bottom of terminal strips.</p> <p>Let us take a look at what a breadboard looks like in real life.</p> Fig: Real image of 800-pin Breadboard"},{"location":"fade-led-arduino/","title":"LED fading","text":"<p>In this activity, we'll be controlling brightness of an LED using pwm or <code>pulse width modulation</code> technique.</p> <p>Info</p> <p>Refer to technical jargon page  HERE for and explaination to of pwm signal.</p>"},{"location":"fade-led-arduino/#hardware-required","title":"hardware required","text":"Item Quantity <code>UNO 2040</code> 1 <code>UNO 2040 USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>LED (any colour)</code> 1 <code>male to male jumpers</code> 2"},{"location":"fade-led-arduino/#circuit-diagram","title":"circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables.</p>"},{"location":"fade-led-arduino/#defining-the-pin-and-required-variable","title":"defining the pin and required variable","text":"<p>Use of variable in this code </p> <ul> <li>int led: the PWM pin the LED is attached to</li> <li>int brightness: how bright the LED is</li> <li>int fade: how many points to fade the LED by</li> </ul> <p>we can make variable using this the code</p> <pre><code>int led = 13;        int brightness = 0;  int fade = 5;  </code></pre>"},{"location":"fade-led-arduino/#defining-led-pin-as-output","title":"Defining led pin as output","text":"<p>defining the led pin</p> <pre><code>void setup() {\npinMode(led, OUTPUT);\n}\n</code></pre>"},{"location":"fade-led-arduino/#main-loop","title":"Main loop","text":"<pre><code>void loop() {\n// setting the brightness of pin 13:\nanalogWrite(led, brightness);\n// change the brightness for next time through the loop:\nbrightness = brightness + fade;\n// reverse the direction of the fading at the ends of the fade:\nif (brightness &lt;= 0 || brightness &gt;= 255) {\nfade = -fade;\n}\n// wait for 30 milliseconds \ndelay(30);\n}\n</code></pre>"},{"location":"fade-led-arduino/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>int led = 9;         int brightness = 0;  int fadeAmount = 5;\nvoid setup() {\npinMode(led, OUTPUT);\n}\nvoid loop() {\nanalogWrite(led, brightness);\nbrightness = brightness + fadeAmount;\nif (brightness &lt;= 0 || brightness &gt;= 255) {\nfadeAmount = -fadeAmount;\n}\ndelay(30);\n}\n</code></pre>"},{"location":"fade-led-arduino/#activity","title":"Activity","text":"<p>Question</p> <p>Try adding a second LED and see if you can alternate the Fading sequence between the leds.</p>"},{"location":"intro/","title":"Welcome","text":"<p>Uno-2040 is a development board which comes in arduino uno form factor that we all know and love. Which means it's 1-1 pin compatible with Arduino Uno R3. it's mostly a drop-in replacement for the existing Arduino Uno, So the existing shields meant for arduino uno can also be used with it.</p>"},{"location":"intro/#get-to-know-your-uno-2040-technical-specifications","title":"Get to know your Uno-2040 (Technical specifications)","text":"<p>The heart of the board is Raspberry pi's RP2040 microcontroller. It's is a low-cost, high-performance microcontroller board with flexible digital interfaces. Key features include:</p> <ul> <li>RP2040 microcontroller chip designed by Raspberry Pi in the United Kingdom</li> <li>Dual-core Arm Cortex M0+ processor, flexible clock running up to 133 MHz</li> <li>264KB of SRAM, and 2MB of on-board Flash memory</li> <li>Castellated module allows soldering direct to carrier boards</li> <li>USB 1.1 with device and host support</li> <li>Low-power sleep and dormant modes</li> <li>Drag-and-drop programming using mass storage over USB</li> <li>26 \u00d7 multi-function GPIO pins</li> <li>2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 3 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM channels</li> <li>Accurate clock and timer on-chip</li> <li>Temperature sensor</li> <li>Accelerated floating-point libraries on-chip</li> <li>8 \u00d7 Programmable I/O (PIO) state machines for custom peripheral support</li> </ul>"},{"location":"intro/#pinout-and-pin-definitions","title":"pinout and pin definitions","text":"<p>View full resolution image in a new tab</p>"},{"location":"intro/#supported-programming-languages","title":"Supported Programming languages","text":"<p>The main focus of  Uno-2040 is to teach python which means we'll be programming all of our projects using python programming language. However, Raspberry pi pico supports the following programming languages:</p> <ul> <li><code>Arduino IDE</code> - Good ol' arduino programming language that we know and love.</li> <li><code>Micropython</code> - It is a full implementation of the Python 3 programming language that runs directly on embedded hardware like Raspberry Pi Pico.</li> <li><code>Circuitpython</code> - It is a port of Micropython developed by Adafruit Industries that has way more features than standard Micropython build.</li> <li><code>C/C++ SDK</code> - Native software development kit that runs on C/C++ programming language.</li> </ul>"},{"location":"jargon/","title":"Technical jargon","text":""},{"location":"jargon/#ide","title":"IDE","text":"<p>An integrated development environment is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of at least a source code editor, build automation tools and a debugger.</p>"},{"location":"jargon/#firmware-vs-software","title":"Firmware vs Software","text":""},{"location":"jargon/#firmware","title":"Firmware","text":"<p>In computing, firmware is a specific class of computer software that provides the low-level control for a device's specific hardware. Firmware can either provide a standardized operating environment for more complex device software (allowing more hardware-independence), or, for less complex devices, act as the device's complete operating system, performing all control, monitoring and data manipulation functions.</p>"},{"location":"jargon/#software","title":"Software","text":"<p>Software is a collection of instructions and data that tell a computer how to work. This is in contrast to physical hardware, from which the system is built and actually performs the work. In computer science and software engineering, computer software is all information processed by computer systems, including programs and data. Computer software includes computer programs, libraries and related non-executable data, such as online documentation or digital media. Computer hardware and software require each other and neither can be realistically used on its own.</p>"},{"location":"jargon/#inputs","title":"Inputs","text":"<p>In computer science, the general meaning of input is to provide or give something to the computer, in other words, when a computer or device is receiving a command or signal from outer sources, the event is referred to as input to the device.</p>"},{"location":"jargon/#digital","title":"Digital","text":"<p>The word digital comes from the same source as the words digit and digitus (the Latin word for finger), as fingers are often used for counting. The term is most commonly used in computing and electronics, especially where real-world information is converted to binary numeric form as in digital audio and digital photography.</p>"},{"location":"jargon/#analog","title":"Analog","text":"<p>An analog signal is any continuous signal for which the time-varying feature of the signal is a representation of some other time-varying quantity, i.e., analogous to another time-varying signal. For example, in an analog audio signal, the instantaneous voltage of the signal varies continuously with the pressure of the sound waves.</p>"},{"location":"jargon/#outputs","title":"outputs","text":"<p>An output device is any piece of computer hardware equipment which converts information into human read able form. It can be text, graphics, tactile, audio, and video.</p>"},{"location":"jargon/#digital_1","title":"Digital","text":"<p>Info</p> <p>Same as above.</p>"},{"location":"jargon/#analog-pwm","title":"analog (PWM)","text":"<p>Pulse width modulation (PWM), is a method of reducing the average power delivered by an electrical signal, by effectively chopping it up into discrete parts. The average value of voltage (and current) fed to the load is controlled by turning the switch between supply and load on and off at a fast rate. The longer the switch is on compared to the off periods, the higher the total power supplied to the load.</p> <p>The rate (or frequency) at which the power supply must switch can vary greatly depending on load and application. For example, switching has to be done several times a minute in an electric stove; 120 Hz in a lamp dimmer; between a few kilohertz (kHz) and tens of kHz for a motor drive; and well into the tens or hundreds of kHz in audio amplifiers and computer power supplies. The main advantage of PWM is that power loss in the switching devices is very low.</p> <p></p>"},{"location":"jargon/#serial-communication","title":"Serial communication","text":"<p>Serial communication (also called RS232 communication) enables a microcontroller to be connected to another microcontroller or to a PC using a serial cable. Some microcontrollers have built-in hardware called universal synchronous\u2013asynchronous receiver\u2013Transmitter (UART) to implement a serial communication interface. The baud rate (bits per second) and the data format can usually be selected by the user program. If any serial I/O hardware is not provided, it is easy to develop software to implement serial data communication using any I/O pin of a microcontroller.</p>"},{"location":"led-control/","title":"LED Brightness control","text":"<p>In this activity, we'll be controlling brightness of an LED using potentiometer</p>"},{"location":"led-control/#hardware-required","title":"hardware required","text":"Item Quantity <code>UNO 2040</code> 1 <code>UNO 2040 USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>LED (any colour)</code> 1 <code>male to male jumpers</code> 5 <code>Potentiometer</code> 1"},{"location":"led-control/#circuit-diagram","title":"circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables.</p>"},{"location":"led-control/#defining-the-pin","title":"defining the pin","text":"<pre><code>int LED_PIN = 13; </code></pre> <p>we can make variable using this the code</p>"},{"location":"led-control/#defining-led-pin-as-output","title":"Defining led pin as output","text":"<p>defining the led pin </p> <pre><code>void setup() {\npinMode(LED_PIN, OUTPUT);}\n}\n</code></pre>"},{"location":"led-control/#main-loop","title":"Main loop","text":"<p><pre><code>void loop() {\nint analogValue = analogRead(A0);\nint brightness = map(analogValue, 0, 1023, 0, 255);\nanalogWrite(LED_PIN, brightness);}\n</code></pre> Reading the value from potentiometer and controling the brightness of led</p>"},{"location":"led-control/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>int LED_PIN = 13; void setup() {\nSerial.begin(9600);\npinMode(LED_PIN, OUTPUT);}\nvoid loop() {\nint analogValue = analogRead(A0);\nint brightness = map(analogValue, 0, 1023, 0, 255);\nanalogWrite(LED_PIN, brightness);}\n</code></pre>"},{"location":"led-control/#activity","title":"Activity","text":"<p>Question</p> <p>Try to it with buzzer</p>"},{"location":"listofprojects/","title":"List of projects","text":"<p>Following are the projects that we will be making. </p>"},{"location":"listofprojects/#projects","title":"Projects","text":"<ul> <li> <p>LED blink </p> <p>Create a simple LED blink circuit using 1 LED. The LED blinks in 1 second interval.</p> </li> <li> <p>LED fading </p> <p>Control brightness of an LED using pwm or <code>pulse width modulation</code> technique.</p> </li> <li> <p>Digital inputs </p> <p>Inputs from push buttons and display output on computer or using leds.</p> </li> <li> <p>Analog inputs</p> <p>Inputs from potentiometer and display its output on screen or control an led's brightness.</p> </li> </ul> <p>Got a project idea or stuck somewhere in the above projects and need our help?  head over to our forums </p>"},{"location":"settinguparduino/","title":"Setting up arduino IDE to work with Uno-2040","text":"<p>The following guide assumes that you've already installed the arduino IDE from the official arduino website.</p>"},{"location":"settinguparduino/#installing-via-arduino-boards-manager","title":"Installing via Arduino Boards Manager","text":"<p>Windows Users: Please do not use the Windows Store version of the actual Arduino application because it has issues detecting attached Pico boards. Use the \"Windows ZIP\" or plain \"Windows\" executable (EXE) download direct from https://arduino.cc. and allow it to install any device drivers it suggests. Otherwise the Uno-2040 may not be detected. Also, if trying out the 2.0 beta Arduino please install the release 1.8 version beforehand to ensure needed device drivers are present.</p> <p>Open up the Arduino IDE and go to File-&gt;Preferences.</p> <p>In the dialog that pops up, enter the following URL in the \"Additional Boards Manager URLs\" field:</p> <pre><code>https://github.com/suraj022/arduino-pico/releases/download/2.1.2/package_rp2040_index.json\n</code></pre> <p></p> <p>Info</p> <p>Multiple boards urls can be seperated with commas.</p> <p>Info</p> <p>Click here to visit the github page.</p> <p>Hit 'OK' to close the dialog.</p> <p>Go to Tools-&gt;Boards-&gt;Board Manager in the IDE</p> <p>Type \"uno-2040\" in the search box and select \"Add\":</p> <p></p>"},{"location":"settinguparduino/#first-time-code-upload","title":"First time code upload.","text":"<ul> <li>hardware required</li> </ul> Item Quantity <code>Sysis Uno-2040</code> 1 <code>USB type-B cable</code> 1 <ul> <li> <p>Step 1:</p> <ul> <li> <p>Connect your Uno-2040 to the computer using a usb type-b cable.</p> </li> <li> <p>Press and hold BOOTSEL button on the Uno-2040, then press the reset button.</p> </li> <li> <p>It'll show-up as a removable disk drive with the name <code>RPI-RP2</code>.</p> <p></p> <p>Bug</p> <p>Even thought the drive shows 127 MB of total usable storage, Uno-2040 only sports 2 MB of internal storage. only about 1 MB is available for filesystem.</p> </li> </ul> </li> <li> <p>Step 2:</p> <ul> <li> <p>Open up arduino IDE and select <code>Sysis Uno-2040</code> from boards menu.</p> <p> </p> </li> <li> <p>Select <code>Blink</code> program from examples and hit upload.</p> <p>Info</p> <p>At this point the IDE will not detect any port connected to the COM port. This is normal behaviour.</p> <p> </p> </li> <li> <p>Once the upload is finished, device will restart and the arduino is successfully installed onto the board. You may now select the appropriate port from the ports menu.</p> <p> </p> </li> </ul> <p>Congratulations! and welcome the the world of arduino.</p> </li> </ul>"},{"location":"settingupcircuitpython/","title":"Setting up build Enviroment to work with Raspberry pi pico","text":""},{"location":"settingupcircuitpython/#download-firmware","title":"Download firmware","text":"<p>First thing to do before we start prototyping on our pico board is to upload a suitable firmware onto the board. At the time of writing this tutorial, there are two variations of python available to download with arduino support coming soon. We will be focusing on Ciruitpython firmware and link to it is as follows.</p> <ul> <li>Circuitpython - Download</li> </ul> <p>Info</p> <p>Link points to the page to download the latest firmware.</p>"},{"location":"settingupcircuitpython/#download-software","title":"Download software","text":"<ul> <li> <p>Code with Mu: preffered IDE to be used with Micropython/Circuitpython firmware.</p> <p>download from the latest version from here.</p> </li> </ul> <p>Note</p> <p>Even though using an IDE is highly recommended, It is not strictly required. We can use any basic text editor to write our code. More information below on limitations of using a basic text editor.</p>"},{"location":"settingupcircuitpython/#installing-firmware","title":"Installing firmware","text":"<ul> <li>hardware required</li> </ul> Item Quantity <code>Raspberry pi pico</code> 1 <code>Micro USB cable</code> 1 <ul> <li> <p>Step 1:</p> <ul> <li> <p>Press and hold BOOTSEL button on the raspberry pi pico and Connect it to your pc/laptop using the supplied microUSB cable.</p> <p> </p> </li> <li> <p>Release the BOOTSEL button. After that, it'll show-up as a removable disk drive with the name <code>RPI-RP2</code>.</p> <p></p> <p>Bug</p> <p>Even thought the drive shows 127 MB of total usable storage, Raspberry pi pico only sports 2 MB of internal storage. and while using Circuitpython firmware, only about 0.98 MB is available to users.</p> </li> </ul> </li> <li> <p>Step 2:</p> <ul> <li> <p>Copy the <code>*.uf2</code> firmware file downloaded above to the <code>RPI-RP2</code> drive by either dragging and dropping the file or by right-clicking the file and copying it to the drive. </p> <p> </p> </li> <li> <p>After the firmware is copied, pico will restart by itself and it's now ready for programming.</p> <p> </p> </li> <li> <p>Following is the file structure of the circuitpython firmware.</p> <p> </p> </li> </ul> </li> </ul>"},{"location":"settingupcircuitpython/#installing-mu-editor","title":"Installing mu editor","text":"<ul> <li> <p>Step 1:</p> <ul> <li> <p>Double click <code>Mu-Editor-Win64-*.exe</code> downloaded from above. You'll be presented with the following window.</p> <p> </p> </li> </ul> </li> <li> <p>Step 2:</p> <ul> <li>Click on <code>I accept</code> check box and then click on <code>Install</code>. </li> </ul> </li> <li> <p>Step 3:</p> <ul> <li> <p>After the installer is done installing the software, You'll be presented with the following window. Click on <code>Finish</code>.</p> <p> </p> </li> </ul> </li> </ul>"},{"location":"settingupcircuitpython/#code-with-mu-first-run","title":"Code with Mu First run.","text":"<ul> <li> <p>Step 1:</p> <ul> <li> <p>Open <code>Mu editor</code> from the the start menu.</p> <p> </p> </li> </ul> </li> <li> <p>Step 2:</p> <ul> <li> <p>During the first run, We are presented with the following choice.</p> <p> </p> </li> <li> <p>Go ahead and select <code>circuitpython</code> option then click on <code>OK</code>. </p> </li> </ul> </li> <li> <p>Step 3:</p> <ul> <li> <p>If pico is already connected to the computer, then Mu will automatically recognize and connect to the board.</p> <p> </p> </li> <li> <p>Now go ahead and click on load and open <code>code.py</code> from pico's drive <code>CIRCUITPY(x:)</code>. where <code>x</code> stands for the letter assigned to the drive.</p> </li> </ul> </li> </ul>"},{"location":"tm1637%204-digit%20seven%20display%20with%20arduino/","title":"Tm1637 4-digit seven display with arduino","text":"<p>Showing some pattern Tm1637 4-digit seven display with the help of arduino</p>"},{"location":"tm1637%204-digit%20seven%20display%20with%20arduino/#hardware-required","title":"hardware required","text":"Item Quantity <code>UNO 2040</code> 1 <code>UNO 2040 USB cable</code> 1 <code>tm1637 4-digit seven display</code> 1 <code>male to male jumpers</code> 4"},{"location":"tm1637%204-digit%20seven%20display%20with%20arduino/#circuit-diagram","title":"circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables  </p>"},{"location":"tm1637%204-digit%20seven%20display%20with%20arduino/#defining-the-pin-display-and-libary","title":"defining the pin , display and libary","text":"<p><pre><code>#include &lt;TM1637.h&gt;\nint dio_pin = 3;\nint clk_pin = 2;\nTM1637 tm(clk_pin, dio_pin);\n</code></pre>  defining display pin , display and  the libary</p> <p>Note</p> <p>Please Install TM1637 libary</p>"},{"location":"tm1637%204-digit%20seven%20display%20with%20arduino/#setting-up-sensor-and-brightness-of-display","title":"Setting up sensor and brightness of display","text":"<p>setting up display and brightness of display</p> <pre><code>void setup(){\ntm.begin();\ntm.setBrightness(7);}\n</code></pre>"},{"location":"tm1637%204-digit%20seven%20display%20with%20arduino/#main-loop","title":"Main loop","text":"<p><pre><code>void loop(){\ntm.display(1234);\ndelay(1000);\ntm.display(12.43);\ndelay(1000);\ntm.display(\"CODE\");\ndelay(1000);}\n</code></pre> Showing some different digits and text on display </p>"},{"location":"tm1637%204-digit%20seven%20display%20with%20arduino/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>#include &lt;TM1637.h&gt;\nint dio_pin = 3;\nint clk_pin = 2;\nTM1637 tm(clk_pin, dio_pin);\nvoid setup(){\ntm.begin();\ntm.setBrightness(7);}\nvoid loop(){\ntm.display(1234);\ndelay(1000);\ntm.display(12.43);\ndelay(1000);\ntm.display(\"CODE\");\ndelay(1000);}\n</code></pre>"},{"location":"tm1637%204-digit%20seven%20display%20with%20arduino/#activity","title":"Activity","text":"<p>Question</p> <p>Try to show some different things on it </p>"},{"location":"vl53l0x-distance/","title":"Distance using VL53L0X sensor","text":"<p>We will measure distance using VL53L0X Sensor </p>"},{"location":"vl53l0x-distance/#hardware-required","title":"hardware required","text":"Item Quantity <code>UNO 2040</code> 1 <code>UNO 2040 USB cable</code> 1 <code>800pin Breadboard</code> 1 <code>VL53L0X Sensor</code> 1 <code>male to male jumpers</code> 4"},{"location":"vl53l0x-distance/#about-vl53l0x","title":"About VL53L0X","text":"<p>The VL53L0X is a new generation Time-of-Flight (ToF) laser-ranging module providing accurate distance measurement whatever the target reflectances, unlike conventional technologies.</p>"},{"location":"vl53l0x-distance/#circuit-diagram","title":"Circuit diagram","text":"<p>Note</p> <p>The coloured lines represent male to male jumper cables.</p>"},{"location":"vl53l0x-distance/#importing-libary-and-making-variable","title":"Importing libary and making variable","text":"<pre><code>#include \"Adafruit_VL53L0X.h\"\nAdafruit_VL53L0X lox = Adafruit_VL53L0X();\n</code></pre> <p>Note</p> <p>Install Adafruit VL53L0X Libary</p>"},{"location":"vl53l0x-distance/#setting-up-serial-monitor-and-vl53l0x-sensor","title":"Setting up serial monitor and VL53L0X sensor","text":"<pre><code>void setup() {\nSerial.begin(115200);\n// wait until serial port open for native USB devices\nwhile (! Serial) {\ndelay(1);\n}\nSerial.println(\"Adafruit VL53L0X test\");\nif (!lox.begin()) {\nSerial.println(F(\"Failed to boot VL53L0X\"));\nwhile(1);\n}\n// power \nSerial.println(F(\"VL53L0X API Simple Ranging example\\n\\n\")); }\n</code></pre>"},{"location":"vl53l0x-distance/#main-loop","title":"Main loop","text":"<pre><code>void loop() {\nVL53L0X_RangingMeasurementData_t measure;\nSerial.print(\"Reading a measurement... \");\nlox.rangingTest(&amp;measure, false); // pass in 'true' to get debug data printout!\nif (measure.RangeStatus != 4) {  // phase failures have incorrect data\nSerial.print(\"Distance (mm): \"); Serial.println(measure.RangeMilliMeter);\n} else {\nSerial.println(\" out of range \");\n}\ndelay(100);\n}\n</code></pre> <p>click on <code>upload</code> icon and the code will upload in uno2040 and open serial monitor you will see the distance from sensor in serial monitor</p>"},{"location":"vl53l0x-distance/#complete-code","title":"Complete code","text":"<p>Copy the complete code from below</p> Complete code <pre><code>#include \"Adafruit_VL53L0X.h\"\nAdafruit_VL53L0X lox = Adafruit_VL53L0X();\nvoid setup() {\nSerial.begin(115200);\nwhile (! Serial) {\ndelay(1);\n}\nSerial.println(\"Adafruit VL53L0X test\");\nif (!lox.begin()) {\nSerial.println(F(\"Failed to boot VL53L0X\"));\nwhile(1);\n}\nSerial.println(F(\"VL53L0X API Simple Ranging example\\n\\n\")); }\nvoid loop() {\nVL53L0X_RangingMeasurementData_t measure; Serial.print(\"Reading a measurement... \");\nlox.rangingTest(&amp;measure, false); if (measure.RangeStatus != 4) { Serial.print(\"Distance (mm): \"); Serial.println(measure.RangeMilliMeter);\n} else {\nSerial.println(\" out of range \");\n}\ndelay(100);\n}\n</code></pre>"},{"location":"vl53l0x-distance/#activity","title":"Activity","text":"<p>Question</p> <p>Try printing distances in meters</p>"}]}